{
    "basic_builder": {
        "appname": "Splunk_TA_censys",
        "friendly_name": "Censys Add-on for Splunk",
        "version": "1.1.8",
        "author": "Censys, Inc.",
        "description": "The Censys Add-on for Splunk brings an outside-in perspective of organizations Internet-facing networks to security operations.",
        "theme": "#f07a35",
        "large_icon": "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",
        "small_icon": "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",
        "visible": true,
        "tab_version": "4.1.1",
        "tab_build_no": "0",
        "build_no": 1
    },
    "data_input_builder": {
        "datainputs": [
            {
                "index": "default",
                "sourcetype": "censys:asm:risks",
                "interval": "3600",
                "use_external_validation": true,
                "streaming_mode_xml": true,
                "name": "censys_asm_risks",
                "title": "Censys ASM Risks",
                "description": "",
                "type": "customized",
                "parameters": [
                    {
                        "required": true,
                        "name": "global_account",
                        "label": "Global Account",
                        "default_value": "",
                        "placeholder": "",
                        "help_string": "",
                        "possible_values": [],
                        "type": "global_account",
                        "format_type": "global_account",
                        "value": ""
                    }
                ],
                "data_inputs_options": [
                    {
                        "type": "customized_var",
                        "name": "global_account",
                        "title": "Global Account",
                        "description": "",
                        "required_on_edit": false,
                        "required_on_create": true,
                        "possible_values": [],
                        "format_type": "global_account",
                        "default_value": "",
                        "placeholder": ""
                    }
                ],
                "code": "# encoding = utf-8\n\nimport json\nfrom typing import Dict, Optional\n\nimport requests\nfrom modinput_wrapper.base_modinput import BaseModInput\nfrom splunklib.modularinput.event_writer import EventWriter\nfrom splunklib.modularinput.validation_definition import ValidationDefinition\n\nfrom censys_asm import CensysAsmApi\n\n\"\"\"\n    IMPORTANT\n    Edit only the validate_input and collect_events functions.\n    Do not edit any other part in this file.\n    This file is generated only once when creating the modular input.\n\"\"\"\n\"\"\"\n# For advanced users, if you want to create single instance mod input, uncomment this method.\ndef use_single_instance_mode():\n    return True\n\"\"\"\n\nCHECKPOINT_KEY_PREFIX = \"asm_risks_cursor_\"\n\n\nclass CensysAsmRisksApi(CensysAsmApi):\n    input_stanza: str\n    risk_types: Dict[str, dict]\n\n    def __init__(self, helper: BaseModInput):\n        \"\"\"Initialize the CensysAsmLogbookApi class.\"\"\"\n        self.input_stanza: str = helper.get_input_stanza_names()\n        opt_global_account = helper.get_arg(\"global_account\", self.input_stanza)\n        censys_asm_api_key = opt_global_account.get(\"asm_api_key\")\n        super().__init__(censys_asm_api_key, helper)\n        self.risk_types = {}\n\n    def update_risk_events_cursor_check_point(\n        self, cursor_state: str, checkpoint_key_prefix: str = CHECKPOINT_KEY_PREFIX\n    ):\n        \"\"\"Update the logbook cursor check point.\"\"\"\n        checkpoint_key = checkpoint_key_prefix + self.input_stanza\n        if cursor_state is not None:\n            self.helper.log_debug(\n                f\"Setting check point: {checkpoint_key} to {cursor_state}\"\n            )\n            self.helper.save_check_point(checkpoint_key, cursor_state)\n\n    def get_risk_events_cursor_check_point(\n        self, checkpoint_key_prefix: str = CHECKPOINT_KEY_PREFIX\n    ):\n        \"\"\"Get the risk events cursor and set the check point.\"\"\"\n        checkpoint_key = checkpoint_key_prefix + self.input_stanza\n        cursor_state = self.helper.get_check_point(checkpoint_key)\n        if cursor_state is None:\n            self.helper.log_debug(\n                f\"Check point {checkpoint_key} is not set. Skipping...\"\n            )\n        return cursor_state\n\n    def get_risk_events(\n        self,\n        cursor: Optional[str] = None,\n        after_id: Optional[int] = None,\n        limit: Optional[int] = None,\n    ) -> dict:\n        \"\"\"Get the risk events.\"\"\"\n        response = self._make_call(\n            \"/v2/risk-events\",\n            \"GET\",\n            parameters={\"cursor\": cursor, \"afterId\": after_id, \"limit\": limit},\n        )\n        return response.json()\n\n    def get_risk_type(self, risk_type: str) -> dict:\n        \"\"\"Get the risk type.\"\"\"\n        if risk_type not in self.risk_types:\n            response = self._make_call(f\"/v2/risk-types/{risk_type}\", \"GET\")\n            self.risk_types[risk_type] = response.json()\n        return self.risk_types[risk_type]\n\n    def get_risk_type_name(self, risk_type: str) -> Optional[str]:\n        \"\"\"Get the risk type name.\"\"\"\n        risk_name = self.get_risk_type(risk_type).get(\"name\")\n        if risk_name is None:\n            self.helper.log_error(f\"Risk type {risk_type} not found.\")\n        return risk_name\n\n    def write_risk_events(self, event_writer: EventWriter):\n        \"\"\"Write the risk events.\"\"\"\n        cursor = self.get_risk_events_cursor_check_point()\n\n        self.helper.log_debug(f\"Risk events cursor: {cursor}\")\n        self.helper.log_info(f\"Pulling risk events for input '{self.input_stanza}'...\")\n\n        output_index = self.helper.get_output_index()\n        input_type = self.helper.get_input_type()\n        sourcetype = self.helper.get_sourcetype()\n\n        end_of_events = False\n        while not end_of_events:\n            try:\n                res = self.get_risk_events(cursor)\n                end_of_events = res.get(\"endOfEvents\", False)\n            except requests.HTTPError as e:\n                self.helper.log_error(str(e))\n                break\n\n            risk_events: list[dict] = res.get(\"events\", [])\n            total_events: int = res.get(\"total\", 0)\n            self.helper.log_debug(f\"Adding {total_events} risk events...\")\n\n            for risk_event in risk_events:\n                risk_event[\"dataInputName\"] = self.input_stanza\n                risk_type = risk_event.get(\"riskType\")\n                risk_event[\"riskName\"] = self.get_risk_type_name(risk_type)\n                event = self.helper.new_event(\n                    data=json.dumps(risk_event),\n                    index=output_index,\n                    source=input_type,\n                    sourcetype=sourcetype,\n                )\n                event_writer.write_event(event)\n\n            cursor = res.get(\"next\")\n            self.update_risk_events_cursor_check_point(cursor)\n\n\ndef validate_input(helper: BaseModInput, definition: ValidationDefinition):\n    \"\"\"Validate the input stanza configurations.\"\"\"\n    global_account = definition.parameters.get(\"global_account\", None)\n\n\ndef collect_events(helper, ew):\n    \"\"\"Implement your data collection logic here.\"\"\"\n    risks_api = CensysAsmRisksApi(helper)\n    risks_api.write_risk_events(ew)\n",
                "customized_options": [
                    {
                        "name": "global_account",
                        "value": ""
                    }
                ],
                "uuid": "d3a0e171d8bf47fe832a7fccb789946f"
            },
            {
                "index": "default",
                "sourcetype": "censys:asm:logbook",
                "interval": "3600",
                "use_external_validation": true,
                "streaming_mode_xml": true,
                "name": "censys_asm_logbook",
                "title": "Censys ASM Logbook",
                "description": "",
                "type": "customized",
                "parameters": [
                    {
                        "name": "global_account",
                        "label": "Global Account",
                        "help_string": "",
                        "required": true,
                        "possible_values": [],
                        "format_type": "global_account",
                        "default_value": "",
                        "placeholder": "",
                        "type": "global_account",
                        "value": ""
                    }
                ],
                "data_inputs_options": [
                    {
                        "type": "customized_var",
                        "name": "global_account",
                        "title": "Global Account",
                        "description": "",
                        "required_on_edit": false,
                        "required_on_create": true,
                        "possible_values": [],
                        "format_type": "global_account",
                        "default_value": "",
                        "placeholder": ""
                    }
                ],
                "code": "# encoding = utf-8\n\nimport json\nfrom typing import Optional\n\nimport requests\nfrom modinput_wrapper.base_modinput import BaseModInput\nfrom splunklib.modularinput.event_writer import EventWriter\nfrom splunklib.modularinput.validation_definition import ValidationDefinition\n\nfrom censys_asm import CensysAsmApi\n\n\"\"\"\n    IMPORTANT\n    Edit only the validate_input and collect_events functions.\n    Do not edit any other part in this file.\n    This file is generated only once when creating the modular input.\n\"\"\"\n\"\"\"\n# For advanced users, if you want to create single instance mod input, uncomment this method.\ndef use_single_instance_mode():\n    return True\n\"\"\"\n\nCHECKPOINT_KEY_PREFIX = \"asm_logbook_cursor_\"\n\n\nclass CensysAsmLogbookApi(CensysAsmApi):\n    input_stanza: str\n\n    def __init__(self, helper: BaseModInput):\n        \"\"\"Initialize the CensysAsmLogbookApi class.\"\"\"\n        self.input_stanza: str = helper.get_input_stanza_names()\n        opt_global_account = helper.get_arg(\"global_account\", self.input_stanza)\n        censys_asm_api_key = opt_global_account.get(\"asm_api_key\")\n        super().__init__(censys_asm_api_key, helper)\n\n    def get_logbook_cursor(self) -> Optional[str]:\n        \"\"\"Get the logbook cursor.\"\"\"\n        response = self._make_call(\"/v1/logbook-cursor\", \"POST\")\n        logbook_cursor = response.json().get(\"cursor\")\n        if logbook_cursor is None:\n            self.helper.log_error(\"Failed to get logbook cursor.\")\n            self.helper.log_debug(response.text)\n        return logbook_cursor\n\n    def update_logbook_cursor_check_point(\n        self, cursor_state: str, checkpoint_key_prefix: str = CHECKPOINT_KEY_PREFIX\n    ):\n        \"\"\"Update the logbook cursor check point.\"\"\"\n        checkpoint_key = checkpoint_key_prefix + self.input_stanza\n        if cursor_state is not None:\n            self.helper.log_debug(\n                f\"Setting check point: {checkpoint_key} to {cursor_state}\"\n            )\n            self.helper.save_check_point(checkpoint_key, cursor_state)\n\n    def get_logbook_cursor_check_point(\n        self, checkpoint_key_prefix: str = CHECKPOINT_KEY_PREFIX\n    ):\n        \"\"\"Get the logbook cursor and set the check point.\"\"\"\n        checkpoint_key = checkpoint_key_prefix + self.input_stanza\n        cursor_state = self.helper.get_check_point(checkpoint_key)\n        if cursor_state is None:\n            self.helper.log_debug(\"Getting new logbook cursor...\")\n            cursor_state = self.get_logbook_cursor()\n            if cursor_state is not None:\n                self.helper.log_debug(\n                    f\"Setting check point: {checkpoint_key} to {cursor_state}\"\n                )\n                self.helper.save_check_point(checkpoint_key, cursor_state)\n        return cursor_state\n\n    def get_logbook_events(self, cursor: Optional[str] = None) -> dict:\n        \"\"\"Get the logbook events.\"\"\"\n        response = self._make_call(\"/v1/logbook\", \"GET\", parameters={\"cursor\": cursor})\n        return response.json()\n\n    def write_logbook_events(self, event_writer: EventWriter):\n        \"\"\"Write the logbook events.\"\"\"\n        cursor = self.get_logbook_cursor_check_point()\n\n        self.helper.log_debug(f\"Logbook cursor: {cursor}\")\n        self.helper.log_info(\n            f\"Pulling logbook events for input '{self.input_stanza}'...\"\n        )\n\n        output_index = self.helper.get_output_index()\n        input_type = self.helper.get_input_type()\n        sourcetype = self.helper.get_sourcetype()\n\n        end_of_events = False\n        while not end_of_events:\n            try:\n                res = self.get_logbook_events(cursor)\n            except requests.HTTPError as e:\n                self.helper.log_error(str(e))\n                break\n\n            logbook_events: list[dict] = res.get(\"events\", [])\n            self.helper.log_debug(f\"Adding {len(logbook_events)} logbook events...\")\n\n            end_of_events: bool = res.get(\"endOfEvents\", False)\n            for logbook_event in logbook_events:\n                logbook_event[\"dataInputName\"] = self.input_stanza\n                event = self.helper.new_event(\n                    data=json.dumps(logbook_event),\n                    index=output_index,\n                    source=input_type,\n                    sourcetype=sourcetype,\n                )\n                event_writer.write_event(event)\n\n            cursor = res.get(\"nextCursor\")\n            self.update_logbook_cursor_check_point(cursor)\n\n\ndef validate_input(helper: BaseModInput, definition: ValidationDefinition):\n    \"\"\"Validate the input stanza configurations.\"\"\"\n    global_account = definition.parameters.get(\"global_account\", None)\n\n\ndef collect_events(helper: BaseModInput, ew: EventWriter):\n    \"\"\"Collect Censys ASM Logbook events.\"\"\"\n    logbook_api = CensysAsmLogbookApi(helper)\n    logbook_api.write_logbook_events(ew)\n",
                "customized_options": [
                    {
                        "name": "global_account",
                        "value": ""
                    }
                ],
                "uuid": "eda688d4955549cc8486a02a1b246771",
                "sample_count": "50"
            }
        ]
    },
    "field_extraction_builder": {
        "censys:asm:logbook": {
            "is_parsed": true,
            "data_format": "json"
        },
        "censys:asm:risks": {
            "is_parsed": true,
            "data_format": "json"
        }
    },
    "global_settings_builder": {
        "global_settings": {
            "proxy_settings": {
                "proxy_type": "http"
            },
            "log_settings": {
                "log_level": "DEBUG"
            },
            "credential_settings": []
        }
    },
    "sourcetype_builder": {
        "censys:asm:logbook": {
            "metadata": {
                "event_count": 0,
                "data_input_name": "censys_asm_logbook",
                "extractions_count": 0,
                "cims_count": 0
            }
        },
        "censys:asm:risks": {
            "metadata": {
                "event_count": 0,
                "data_input_name": "censys_asm_risks",
                "extractions_count": 0,
                "cims_count": 0
            }
        }
    },
    "validation": {
        "validators": [
            "best_practice_validation",
            "data_model_mapping_validation",
            "field_extract_validation",
            "app_cert_validation"
        ],
        "status": "job_started",
        "validation_id": "v_1668173948_42"
    }
}
